name: Gemini DevContainer Diagnostic (CI-Integrated)

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run-in-devcontainer:
    runs-on: ubuntu-latest
    
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: ü§ñ Run Commands in Dev Container
        # This action handles the setup and execution within the dev container
        # Corrected to the stable v0.3 release of the action
        uses: devcontainers/ci@v0.3
        with:
          # The `runCmd` parameter specifies the shell commands to execute
          # inside the fully-initialized dev container.
          runCmd: |
            # Exit immediately if a command fails
            set -e

            echo "‚úÖ Now running inside the dev container."

            # 1. Install the official Gemini CLI using npm
            echo "üõ†Ô∏è Installing Gemini CLI via npm..."
            # The -g flag installs the package globally, making the `gemini` command available.
            npm install -g @google/gemini-cli

            # 2. Setup Git Identity inside the container
            echo "üßë‚Äçüíª Setting up Git..."
            git config --global user.name "gemini-ci-bot"
            git config --global user.email "gemini-ci-bot@users.noreply.github.com"
            # The workspace is mounted, but we need to tell git it's a safe directory
            git config --global --add safe.directory "$PWD"
            
            # 3. Create the prompt for Gemini
            echo "üìù Creating Gemini prompt..."
            mkdir -p gemini
            TUTORIAL_URL="https://drasi.io/getting-started/"
            PROMPT_CONTENT=$(cat <<-EOF
            You are an expert QA engineer inside a devcontainer. Your task is to meticulously validate the Drasi 'Getting Started' tutorial.
            The full tutorial is available at $TUTORIAL_URL.

            Your mission is to:
            1. Act as a user following the tutorial step-by-step.
            2. You are already inside the correct devcontainer. The repository is at the current working directory. The tutorial itself starts from the 'tutorial/getting-started' directory. Please `cd` to that directory first before running any tutorial commands.
            3. Execute every command exactly as it appears in the tutorial.
            4. For each step, log the command you are about to run.
            5. Capture the complete, unaltered output of each command.
            6. If a command fails or produces an error, describe the issue in detail.
            7. At the end, provide a summary of your findings in a Markdown report.

            Please begin. Your entire session log will be saved.
            EOF
            )

            # 4. Run Gemini to validate the tutorial
            echo "ü§ñ Running Gemini..."
            # The GEMINI_API_KEY is passed in from the job's environment.
            # Using --prompt with the variable content, and --yolo for non-interactive execution.
            gemini --yolo --prompt "$PROMPT_CONTENT" > "gemini/output.md" 2> "gemini/error.log"
            GEMINI_EXIT_CODE=$?
            echo -e "\n\n---\nGemini CLI exited with code: $GEMINI_EXIT_CODE." >> gemini/output.md
            
            # 5. Create a new branch and commit the results
            echo "üåø Committing results to a new branch..."
            CURRENT_BRANCH="${GITHUB_REF##*/}"
            BRANCH_NAME="${CURRENT_BRANCH}_gemini"
            git checkout -b "$BRANCH_NAME"
            git add gemini/
            
            if git diff-index --quiet HEAD; then
              echo "No changes to commit."
            else
              git commit -m "Add Gemini diagnostic report for '$CURRENT_BRANCH'"
              git push origin "$BRANCH_NAME"
              echo "‚úÖ Pushed results to branch $BRANCH_NAME."
            fi
        env:
          # This secret is securely passed into the dev container environment
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: üì¶ Archive Diagnostic Report
        # This step runs back on the host runner after the dev container job is finished
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gemini-diagnostic-report
          path: |
            gemini/
          if-no-files-found: warn
